require "fileutils"
require "open-uri"

namespace :building_sync_rails do
  desc "Use BuildingSync XSD file to generate Ruby code via `xsd2ruby.rb` script."
  task :xsd2ruby => :environment do
    # @!attribute [r] path_xsd_origin
    #   @return [String] the location of the BuildingSync XSD file on the local disk
    path_xsd_origin = ::File.join("public", "BuildingSync.xsd")

    # @!attribute [r] uri_xsd_remote
    #   @return [URI] the location of the BuildingSync XSD file on the remote nework
    uri_xsd_remote = ::URI.parse("https://raw.githubusercontent.com/BuildingSync/schema/gbXML_externalref/BuildingSync.xsd")

    # @!attribute [r] options_by_local_name
    #   @return [Hash<String, Hash<Symbol, Array<Hash<Symbol, Object>>>>] the options by the local name of each Ruby source file
    #   @note Ruby source files are auto-generated by the "soap4r" gem.  This data structure contains the information that is used to sanitize the auto-generated code, making it suitable for revision management.
    options_by_local_name = {
      "BuildingSync.rb" => {
        delete_at: [
          {
            index: 4,
            count: 2,
          },
          {
            index: -2,
            count: 2,
          },
        ],
        indent_at: [
          {
            first_index: 4,
            last_index: -2,
            count: 1,
            separator: '  ',
          },
        ],
      },
      "BuildingSync_mapper.rb" => {
        delete_at: [
          {
            index: 3,
            count: 2,
          },
          {
            index: -2,
            count: 2,
          },
        ],
        indent_at: [],
      },
      "BuildingSync_mapping_registry.rb" => {
        delete_at: [
          {
            index: 3,
            count: 2,
          },
          {
            index: -2,
            count: 2,
          },
        ],
        indent_at: [],
      },
    }

    # @note Download the BuildingSync XSD file from the remote network and copy to the local disk.
    uri_xsd_remote.open do |io_xsd_remote|
      ::File.open(path_xsd_origin, "w") do |io_xsd_origin|
        ::IO.copy_stream(io_xsd_remote, io_xsd_origin)
      end
    end

    # @note Execute the "xsd2ruby.rb" binary that is installed by the "soap4r" gem.  The Ruby source files are created in the "/" directory.
    ::Bundler.with_clean_env do
      `xsd2ruby.rb --xsd #{path_xsd_origin} --module_path "BuildingSync" --classdef "BuildingSync" --mapping_registry --mapper --force --quiet`
    end

    # @note Sanitize the contents of each Ruby source file.
    options_by_local_name.each do |local_name, options|
      src_path_rb_origin = ::File.join(local_name)

      s = ::File.open(src_path_rb_origin, "r") do |file|
        array = file.read.split($/)

        options[:delete_at].each do |hash|
          hash[:count].times { array.delete_at(hash[:index]) }
        end

        options[:indent_at].each do |hash|
          array[::Range.new(hash[:first_index], hash[:last_index], false)].each do |s|
            s.gsub!(::Regexp.new("^(.*?)$"), ::Kernel.sprintf('%s\1', ::Array.new(hash[:count], hash[:separator]).join("")))
            s.rstrip!
          end
        end

        array.join($/)
      end

      ::File.open(src_path_rb_origin, "w") do |file|
        file.puts(s)
      end
    end

    # @note Move the Ruby source files to the "lib/" directory.
    options_by_local_name.keys.each do |local_name|
      src_path_rb_origin = ::File.join(local_name)
      dest_path_rb_origin = ::File.join("lib", local_name)
      ::FileUtils.mv(src_path_rb_origin, dest_path_rb_origin) if ::File.exist?(src_path_rb_origin)
    end
  end
end
